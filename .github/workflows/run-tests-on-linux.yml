name: Run tests on Linux

on:
  workflow_call:
    inputs:
      tdinternal:
        description: 'Is the PR from TDinternal?'
        required: true
        type: boolean
      specified_source_branch:
        description: 'Enter the source branch name of TDengine'
        required: false
        default: 'unavailable'
        type: string
      specified_target_branch:
        description: 'Enter the target branch name of TDengine'
        required: false
        default: 'unavailable'
        type: string
      specified_pr_number:
        description: 'Enter the PR number of TDengine'
        required: false
        default: 'unavailable'
        type: string

jobs:
  run-tests-on-linux:
    runs-on: 
      group: CI
      labels: [self-hosted, Linux, X64, new-framework]
    
    timeout-minutes: 200

    env:
      CONTAINER_NAME: 'taosd-test'
      WKDIR: '/var/lib/jenkins/workspace'
      WK: '/var/lib/jenkins/workspace/TDinternal'
      WKC: '/var/lib/jenkins/workspace/TDinternal/community'
      IS_TDINTERNAL: ${{ inputs.tdinternal }}
      SOURCE_BRANCH: ""
      TARGET_BRANCH: ""
      PR_NUMBER: ""

    steps:
      - name: Set envrionment variables based on condition
        run: |
          if [[ "${{ inputs.specified_source_branch }}" == 'unavailable' ]] && \
            [[ "${{ inputs.specified_target_branch}}" == 'unavailable' ]] && \
            [[ "${{ inputs.specified_pr_number}}" == 'unavailable' ]]; then
            echo "set from github event"
            echo SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo TARGET_BRANCH="${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
            echo PR_NUMBER="${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "set from input"
            echo "SOURCE_BRANCH=${{ inputs.specified_source_branch }}" >> $GITHUB_ENV
            echo "TARGET_BRANCH=${{ inputs.specified_target_branch }}" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ inputs.specified_pr_number }}" >> $GITHUB_ENV
          fi

          echo "Current step debug (GITHUB_ENV content):"
          cat $GITHUB_ENV
      - name: Output the environment information
        run: |
          echo "::group::Environment Info"
          date
          hostname
          env
          echo "Runner: ${{ runner.name }}"
          echo "Trigger Source from TDinternal: ${{ env.IS_TDINTERNAL }}"
          echo "Workspace: ${{ env.WKDIR }}"
          git --version
          echo "${{ env.WKDIR }}/restore.sh -p PR-${{ env.PR_NUMBER }} -n ${{ github.run_number }} -c ${{ env.CONTAINER_NAME }}"
          echo "::endgroup::"

      - name: Prepare repositories
        run: |
          set -euo pipefail
          prepare_environment() {
            cd "$1"
            git reset --hard
            git clean -f
            git remote prune origin
            git fetch
            git checkout "$2"
          }
          if [[ "${{ inputs.specified_source_branch }}" == 'unavailable' ]] && \
            [[ "${{ inputs.specified_target_branch}}" == 'unavailable' ]] && \
            [[ "${{ inputs.specified_pr_number}}" == 'unavailable' ]]; then
             prepare_environment "${{ env.WK }}" "$TARGET_BRANCH"
          else
            prepare_environment "${{ env.WK }}" "$SOURCE_BRANCH"
          fi
          prepare_environment "${{ env.WKC }}" "$TARGET_BRANCH"

      - name: Get latest codes and logs for TDinternal PR
        if: ${{ env.IS_TDINTERNAL == 'true' }}
        run: |
          cd ${{ env.WK }}
          git pull >/dev/null
          git log -5
          echo "`date "+%Y%m%d-%H%M%S"` TDinternalCI/PR-${{ env.PR_NUMBER }}:${{ github.run_number }}:${{ env.TARGET_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "CHANGE_BRANCH:${{ env.SOURCE_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "TDinternal log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          git fetch origin +refs/pull/${{ env.PR_NUMBER }}/merge
          git checkout -qf FETCH_HEAD
          git log -5
          echo "TDinternal log merged: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          cd ${{ env.WKC }}
          git remote prune origin
          git pull >/dev/null
          git log -5
          echo "community log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
      - name: Get latest codes and logs for TDengine PR
        if: ${{ env.IS_TDINTERNAL == 'false' }}
        run: |
          cd ${{ env.WKC }}
          git remote prune origin
          git pull >/dev/null
          git log -5
          echo "`date "+%Y%m%d-%H%M%S"` TDengineTest/PR-${{ env.PR_NUMBER }}:${{ github.run_number }}:${{ env.TARGET_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "CHANGE_BRANCH:${{ env.SOURCE_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "community log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          git fetch origin +refs/pull/${{ env.PR_NUMBER }}/merge
          git checkout -qf FETCH_HEAD
          git log -5
          echo "community log merged: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          cd ${{ env.WK }}
          git pull >/dev/null
          git log -5
          echo "TDinternal log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
      - name: Update submodule
        run: |
          cd ${{ env.WKC }}
          git submodule update --init --recursive
      - name: Output the 'file_no_doc_changed' information to the file
        if: ${{ env.IS_TDINTERNAL == 'false' && env.TARGET_BRANCH != '3.1' }}
        run: |
          mkdir -p ${{ env.WKDIR }}/tmp/${{ env.PR_NUMBER }}_${{ github.run_number }}
          cd ${{ env.WKC }}
          changed_files_non_doc=$(git --no-pager diff --name-only FETCH_HEAD `git merge-base FETCH_HEAD ${{ env.TARGET_BRANCH }}`|grep -v "^docs/en/"|grep -v "^docs/zh/"|grep -v ".md$" | tr '\n' ' ' || :)
          echo $changed_files_non_doc > ${{ env.WKDIR }}/tmp/${{ env.PR_NUMBER }}_${{ github.run_number }}/docs_changed.txt

      - name: Check assert testing
        if: ${{ env.IS_TDINTERNAL == 'false' && env.TARGET_BRANCH != '3.1' }}
        run: |
          cd ${{ env.WKC }}/tests/parallel_test
          ./run_check_assert_container.sh -d ${{ env.WKDIR }}
      - name: Check void function testing
        if: ${{ env.IS_TDINTERNAL == 'false' && env.TARGET_BRANCH != '3.1' }}
        run: |
          cd ${{ env.WKC }}/tests/parallel_test
          ./run_check_void_container.sh -d ${{ env.WKDIR }}
      - name: Build docker container
        run: |
          date
          rm -rf ${{ env.WKC }}/debug
          cd ${{ env.WKC }}/tests/parallel_test
          # set taosadapter tag as target branch
          time ./container_build.sh -w ${{ env.WKDIR }} -e -b ${{ env.TARGET_BRANCH }}
      - name: Get parameters for testing
        id: get_param
        run: |
          log_server_file="/home/log_server.json"
          timeout_cmd=""
          extra_param=""

          if [ -f "$log_server_file" ]; then
            log_server_enabled=$(jq '.enabled' "$log_server_file")
            timeout_param=$(jq '.timeout' "$log_server_file")
            if [ "$timeout_param" != "null" ] && [ "$timeout_param" != "0" ]; then
              timeout_cmd="timeout $timeout_param"
            fi

            if [ "$log_server_enabled" == "1" ]; then
              log_server=$(jq '.server' "$log_server_file" | sed 's/\\\"//g')
              if [ "$log_server" != "null" ] && [ "$log_server" != "" ]; then
                extra_param="-w $log_server"
              fi
            fi
          fi
          echo "timeout_cmd=$timeout_cmd" >> $GITHUB_OUTPUT
          echo "extra_param=$extra_param" >> $GITHUB_OUTPUT
      - name: Run function returns with a null pointer scan testing
        if: ${{ env.IS_TDINTERNAL == 'false' && env.TARGET_BRANCH != '3.1' }}
        run: |
          cd ${{ env.WKC }}/tests/parallel_test
          ./run_scan_container.sh -d ${{ env.WKDIR }} -b ${{ env.PR_NUMBER }}_${{ github.run_number }} -f ${{ env.WKDIR }}/tmp/${{ env.PR_NUMBER }}_${{ github.run_number }}/docs_changed.txt ${{ steps.get_param.outputs.extra_param }}
      - name: Run function test cases
        run: |
          cd ${{ env.WKC }}/tests/parallel_test
          export DEFAULT_RETRY_TIME=2
          date
          chmod +x ${{ env.WKC }}/tests/parallel_test/run.sh
          ${{ steps.get_param.outputs.timeout_cmd }} time ./run.sh -e -m /home/m.json -t cases.task -b PR-${{ env.PR_NUMBER }}_${{ github.run_number }} -l ${{ env.WKDIR }}/log -o 1200 ${{ steps.get_param.outputs.extra_param }}
      - name: Clearup the running cases
        if: always()
        run: |
          pid=$(ps -ef | grep 'run_case.sh' | grep -v 'grep' | awk '{print $2}')
          if [ -n "$pid" ]; then
            ps -ef | grep 'run_case.sh'  | grep -v 'grep' | awk '{print $2}'| xargs kill -9
          else
              echo "No run_case.sh process is running."
          fi
