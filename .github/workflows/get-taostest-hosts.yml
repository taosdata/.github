name: Update Hosts

on:
  push:
    branches:
      - test/fractal
# on:
#   workflow_dispatch:

jobs:
  filter-runners:
    runs-on: ubuntu-latest
    outputs:
      runners: ${{ steps.get-runners.outputs.matrix}}
      td_runners: ${{ steps.get-runners.outputs.td_matrix}}
      runner_names: ${{ steps.get-runners.outputs.names}}
      td_runner_names: ${{ steps.get-runners.outputs.td_names}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Available Runners
        env:
          GITHUB_TOKEN: ${{ secrets.RUNNER_PAT }}
        id: get-runners
        run: |
          set -euo pipefail
          echo "Fetching available runners..."
          response_file=$(mktemp)
          gh api /orgs/${{ github.repository_owner }}/actions/runners \
            --paginate \
            --jq '.runners' > "$response_file"

          # set dnode_count
          edge_dnode_count=2
          center_dnode_count=3

          filter_and_format() {
            local count=$1
            local label1=$2
            local label2=$3

            jq -c --argjson count "$count" --arg label1 "$label1" --arg label2 "$label2" '
              map(
                select(
                  .labels |
                  (map(.name) | index($label1)) != null and
                  (map(.name) | index($label2)) != null
                )
                | {
                    name,
                    group: (
                      if .labels | map(.name) | index("fractal") != null then "fractal"
                      else "default"
                      end
                    ),
                    labels: (
                      .labels | map(.name) | join(", ") |
                      split(", ") |
                      map(select(. != "")) |
                      ["self-hosted", "Linux", "X64"] + .
                    )
                  }
              )[:$count]
            ' "$response_file"
          }
          # filter_and_format "$edge_dnode_count" "fractal" "mqtt"
          filtered_taostest_runners=$(filter_and_format "1" "fractal" "taostest")
          filtered_edge_runners=$(filter_and_format "$edge_dnode_count" "fractal" "edge_td")
          filtered_center_runners=$(filter_and_format "$center_dnode_count" "fractal" "center_td")

          echo "âœ… Selected runners with formatted labels:"
          echo "$filtered_taostest_runners"
          echo "$filtered_edge_runners"
          echo "$filtered_center_runners"

          # all runners
          filtered_runners=$(jq -s '[.[][]]' <(echo "$filtered_taostest_runners") <(echo "$filtered_edge_runners") <(echo "$filtered_center_runners"))
          echo "âœ… Selected runners with formatted labels:"
          echo "$filtered_runners"

          # TDengine runners
          td_runners=$(jq -s '[.[][]]' <(echo "$filtered_edge_runners") <(echo "$filtered_center_runners"))
          echo "âœ… Selected td-runners with formatted labels:"
          echo "$td_runners"

          # make sure filtered_runners is a valid JSON array
          if [ -z "$filtered_runners" ]; then
            echo "No runners found. Setting empty matrix."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "names=[]" >> $GITHUB_OUTPUT
          else
            echo "matrix="$filtered_runners"" >> $GITHUB_OUTPUT
            names=$(echo "$filtered_runners" | jq -r '.[].name' | tr '\n' ',')
            names=${names%,}
            echo "names=${names}" >> $GITHUB_OUTPUT

            echo "td_matrix="$td_runners"" >> $GITHUB_OUTPUT
            td_runner_names=$(echo "$td_runners" | jq -r '.[].name' | tr '\n' ',')
            td_runner_names=${td_runner_names%,}
            echo "td_runner_names=${td_runner_names}" >> $GITHUB_OUTPUT
          fi

  upload-hosts-info:
    needs: filter-runners

    strategy:
      matrix:
        runner: ${{ fromJson(needs.filter-runners.outputs.runners || '[]') }}
    runs-on:
      group: ${{ matrix.runner.group }}
      labels: ${{ matrix.runner.labels }}
    steps:
      - name: Print Runner Info
        run: |
          echo "ðŸ”„ Running on group: ${{ matrix.runner.group }}"
          echo "ðŸ”„ Name: ${{ matrix.runner.name }}"

      - name: Get IP and Hostname
        id: get-ip-hostname
        run: |
          echo "ðŸ”„ Getting IP and hostname for the runner..."

          # Get IP and hostname
          ip=$(hostname -I | awk '{print $1}')
          hostname=$(hostname)

          echo "IP: $ip"
          echo "Hostname: $hostname"

          # Save IP and hostname to a file
          echo "$ip $hostname" > ip_hostname_${{ matrix.runner.name }}.txt

      - name: Upload IP and Hostname Info
        uses: actions/upload-artifact@v4
        with:
          name: ip_hostname_${{ matrix.runner.name }}
          path: ip_hostname_${{ matrix.runner.name }}.txt

  combine-and-update-hosts:
    needs:
      - upload-hosts-info
      - filter-runners
    strategy:
      matrix:
        runner: ${{ fromJson(needs.filter-runners.outputs.runners || '[]') }}
    runs-on:
      group: ${{ matrix.runner.group }}
      labels: ${{ matrix.runner.labels }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Install GitHub CLI
        shell: bash
        run: |
          echo "ðŸ”„ Installing GitHub CLI..."
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Authenticate GitHub CLI
        run: |
          echo "ðŸ”„ Authenticating GitHub CLI..."
          echo "${{ secrets.RUNNER_PAT }}" | gh auth login --with-token

      - name: Download IP and Hostname Info
        run: |
          echo "ðŸ”„ Downloading IP and hostname info for each runner..."
          runner_name=${{ needs.filter-runners.outputs.runner_names }}
          echo "Runner Name: $runner_name"

          IFS=',' read -r -a names_array <<< "$runner_name"
          echo "Extracted names: $names_array"
          for name in "${names_array[@]}"; do
            echo "Downloading artifact for runner: $name"
            gh run download $GITHUB_RUN_ID --name "ip_hostname_$name" --dir ip_hostname
          done

      - name: Combine IP and Hostname Info
        run: |
          echo "ðŸ”„ Combining IP and hostname info..."

          # Read all files in the ip_hostname directory and combine them
          ip_hostname_info=$(cat ip_hostname/*.txt | sort | uniq)

          # Save the combined IP and hostname info to an environment variable
          echo "ip_hostname_info<<EOF" >> $GITHUB_ENV
          echo -e "$ip_hostname_info" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update /etc/hosts
        run: |
          echo "ðŸ”„ Updating /etc/hosts..."

          while IFS= read -r line; do
            # Check if the line already exists in /etc/hosts
            if ! grep -Fxq "$line" /etc/hosts; then
              # Append the line to /etc/hosts if it doesn't exist
              echo "$line" | sudo tee -a /etc/hosts
            else
              echo "âœ… Skipping (already exists): $line"
            fi
          done <<< "$ip_hostname_info"

          echo "âœ… Updated /etc/hosts with runner IPs and hostnames:"
          cat /etc/hosts
  get-taostest-hosts:
    needs:
      - upload-hosts-info
      - combine-and-update-hosts
    runs-on:
      group: fractal
      labels:
        - self-hosted
        - Linux
        - X64
        - fractal
        - edge_td
        - fractal-edge-1
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v4
      #   with:
      #     persist-credentials: true


      - name: Set up environment
        run: |
          set -euo pipefail
          # Initialize lists
          single_dnode_hosts=()
          taosBenchmark_hosts=()
          cluster_hosts=()
          hostname_info=$(cat ip_hostname/*.txt | awk '{print $2}' | sort | uniq | tr '\n' ',')
          echo "hostname_info: $hostname_info"
          # Iterate over files in the directory
          for file in ip_hostname/ip_hostname_*; do
            if [[ "$file" == *"edge"* ]]; then
              # Extract hostname from the second column and append to list
              hostname=$(awk '{print $2}' "$file")
              single_dnode_hosts+=("$hostname")
            fi

            if [[ "$file" == *"taostest"* ]]; then
              # Extract hostname from the second column and append to list
              hostname=$(awk '{print $2}' "$file")
              taosBenchmark_hosts+=("$hostname")
            fi

            if [[ "$file" == *"center"* ]]; then
              # Extract hostname from the second column and append to list
              hostname=$(awk '{print $2}' "$file")
              cluster_hosts+=("$hostname")
            fi
          done

          # Convert arrays to strings in the desired format
          single_dnode_hosts_string=$(printf ',"%s"' "${single_dnode_hosts[@]}")
          single_dnode_hosts_string="[${single_dnode_hosts_string:1}]"  # Remove leading comma

          taosBenchmark_hosts_string=$(printf ',"%s"' "${taosBenchmark_hosts[@]}")
          taosBenchmark_hosts_string="[${taosBenchmark_hosts_string:1}]"  # Remove leading comma

          cluster_hosts_string=$(printf ',"%s"' "${cluster_hosts[@]}")
          cluster_hosts_string="[${cluster_hosts_string:1}]"  # Remove leading comma

          # Output the results in the desired format
          echo "Single Dnode Hosts: $single_dnode_hosts_string"
          echo "Taos Benchmark Hosts: $taosBenchmark_hosts_string"
          echo "Cluster Hosts: $cluster_hosts_string"

          # Output the results in the desired format
          echo "Single Dnode Hosts: $single_dnode_hosts_string"
          echo "Taos Benchmark Hosts: $taosBenchmark_hosts_string"
          echo "Cluster Hosts: $cluster_hosts_string"

          # Create JSON files for edge nodes
          for edge in "${single_dnode_hosts[@]}"; do
            cat <<EOF > "${edge}.json"
            {
              "taosd": {
                "fqdn": ["$edge"],
                "spec": {"firstEP": "$edge:6030"}
              },
              "taosadapter": {
                "fqdn": ["$edge"],
                "spec": {}
              },
              "taosBenchmark": {
                "fqdn": ["${taosBenchmark_hosts[0]}"],
                "spec": {}
              },
              "taospy": {
                "fqdn": ["${taosBenchmark_hosts[0]}"],
                "spec": {}
              }
            }EOF
          done
      - name: Display results
        run: |
          echo "Single Dnode Hosts: $single_dnode_hosts"
          echo "Taos Benchmark Hosts: $taosBenchmark_hosts"
          echo "Cluster Hosts: $cluster_hosts"