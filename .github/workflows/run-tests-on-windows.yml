name: Run tests on Windows

on:
  workflow_call:
    inputs:
      tdinternal:
        description: 'Is the PR from TDinternal?'
        required: true
        type: boolean
      specified_source_branch:
        description: 'Enter the source branch name of TDengine'
        required: false
        default: 'unavailable'
        type: string
      specified_target_branch:
        description: 'Enter the target branch name of TDengine'
        required: false
        default: 'unavailable'
        type: string
      specified_pr_number:
        description: 'Enter the PR number of TDengine'
        required: false
        default: 'unavailable'
        type: string

jobs:
  run-tests-on-windows:
    runs-on:
      group: CI
      labels: [self-hosted, Windows, X64, testing]

    timeout-minutes: 126

    env:
      WIN_INTERNAL_ROOT: "C:\\workspace\\0\\TDinternal"
      WIN_COMMUNITY_ROOT: "C:\\workspace\\0\\TDinternal\\community"
      WIN_SYSTEM_TEST_ROOT: "C:\\workspace\\0\\TDinternal\\community\\tests\\system-test"
      WIN_VS_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat"
      WIN_CPU_TYPE: "x64"
      IS_TDINTERNAL: ${{ inputs.tdinternal }}
      SPECIFIED_SOURCE_BRANCH: ${{ inputs.specified_source_branch }}
      SPECIFIED_TARGET_BRANCH: ${{ inputs.specified_target_branch }}
      SPECIFIED_PR_NUMBER: ${{ inputs.specified_pr_number }}
      PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
      PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
      PR_NUMBER_PULL: ${{ github.event.pull_request.number }}

    steps:
    
      - name: init environment
        shell: cmd
        continue-on-error: true
        if: always()
        run: |
          tasklist /FI "IMAGENAME eq python3.exe" /NH | findstr /I python3.exe >nul
          if %errorlevel% equ 0 (
              wmic process where "name='python3.exe'" delete
              echo Python3 process has been terminated.
          ) else (
              echo No Python3 process was found.
          )   
          
      - name: Set environment variables based on condition
        run: |
          REM Trim the blank space
          set SPECIFIED_SOURCE_BRANCH=%SPECIFIED_SOURCE_BRANCH: =%
          set SPECIFIED_TARGET_BRANCH=%SPECIFIED_TARGET_BRANCH: =%
          set SPECIFIED_PR_NUMBER=%SPECIFIED_PR_NUMBER: =%
          set PR_HEAD_REF=%PR_HEAD_REF: =%
          set PR_BASE_REF=%PR_BASE_REF: =%
          set PR_NUMBER=%PR_NUMBER_PULL: =%

          if "%SPECIFIED_SOURCE_BRANCH%"=="unavailable" (
            if "%SPECIFIED_TARGET_BRANCH%"=="unavailable" (
              if "%SPECIFIED_PR_NUMBER%"=="unavailable" (
                echo SOURCE_BRANCH=%PR_HEAD_REF%>>"%GITHUB_ENV%"
                echo TARGET_BRANCH=%PR_BASE_REF%>>"%GITHUB_ENV%"
                echo PR_NUMBER=%PR_NUMBER_PULL%>>"%GITHUB_ENV%"
              )
            )
          ) else (
            echo SOURCE_BRANCH=%SPECIFIED_SOURCE_BRANCH%>>"%GITHUB_ENV%"
            echo TARGET_BRANCH=%SPECIFIED_TARGET_BRANCH%>>"%GITHUB_ENV%"
            echo PR_NUMBER=%SPECIFIED_PR_NUMBER%>>"%GITHUB_ENV%"
          )

          echo "Current step debug (GITHUB_ENV content):"
          type "%GITHUB_ENV%"
        shell: cmd
      - name: Output the environment information
        run: |
          hostname
          taskkill /f /t /im python.exe
          taskkill /f /t /im bash.exe
          taskkill /f /t /im taosd.exe
          ipconfig
          set
          date /t
          time /t
          rd /s /Q "%WIN_INTERNAL_ROOT%\debug" || exit 0
        shell: cmd
      - name: Prepare repositories
        run: |
          :: Prepare internal repository
          if exist "%WIN_INTERNAL_ROOT%" (
            cd /d "%WIN_INTERNAL_ROOT%"
            git reset --hard
            git clean -f
            git remote prune origin
            git fetch
            if "%SPECIFIED_SOURCE_BRANCH%"=="unavailable" (
              if "%SPECIFIED_TARGET_BRANCH%"=="unavailable" (
                if "%SPECIFIED_PR_NUMBER%"=="unavailable" (
                  git checkout "%TARGET_BRANCH%"
                )
              )
            ) else (
              git checkout "%SOURCE_BRANCH%"
            )
          ) else (
            echo Directory does not exist: "%WIN_INTERNAL_ROOT%"
            exit 1
          )

          :: Prepare community repository
          if exist "%WIN_COMMUNITY_ROOT%" (
            cd /d "%WIN_COMMUNITY_ROOT%"
            git reset --hard
            git clean -f
            git remote prune origin
            git fetch
            git checkout "%TARGET_BRANCH%"
          ) else (
            echo Directory does not exist: "%WIN_COMMUNITY_ROOT%"
            exit 1
          )
        shell: cmd
      - name: Get latest codes and logs for TDinternal PR
        if: ${{ env.IS_TDINTERNAL == 'true' }}
        run: |
          cd %WIN_INTERNAL_ROOT%
          git pull origin %TARGET_BRANCH%
          git fetch origin +refs/pull/%PR_NUMBER%/merge
          git checkout -qf FETCH_HEAD
          cd %WIN_COMMUNITY_ROOT%
          git remote prune origin
          git pull
        shell: cmd
      - name: Get latest codes and logs for TDengine PR
        if: ${{ env.IS_TDINTERNAL == 'false' }}
        run: |
          cd %WIN_INTERNAL_ROOT%
          git pull origin %TARGET_BRANCH%
          cd %WIN_COMMUNITY_ROOT%
          git remote prune origin
          git pull  origin %TARGET_BRANCH%
          git fetch origin +refs/pull/%PR_NUMBER%/merge
          git checkout -qf FETCH_HEAD
        shell: cmd
      - name: Output branch and log information
        run: |
          cd %WIN_INTERNAL_ROOT%
          git branch
          git log -5

          cd %WIN_COMMUNITY_ROOT%
          git branch
          git log -5
        shell: cmd
      - name: Update submodule
        run: |
          cd %WIN_COMMUNITY_ROOT%
          git submodule update --init --recursive
        shell: cmd
      - name: Build on windows
        run: |
          echo "building ..."
          time /t
          cd %WIN_INTERNAL_ROOT%
          mkdir debug
          cd debug
          time /t
          call "%WIN_VS_PATH%" %WIN_CPU_TYPE%
          set CL=/MP8
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> cmake"
          time /t
          cmake .. -G "NMake Makefiles JOM" -DBUILD_TEST=true -DBUILD_TOOLS=true || exit 7
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> jom -j 6"
          time /t
          jom -j 6 || exit 8
          time /t

          cd %WIN_COMMUNITY_ROOT%/tests/ci
          pip3 install taospy==2.7.23
          pip3 install taos-ws-py==0.3.8
          xcopy /e/y/i/f %WIN_INTERNAL_ROOT%\\debug\\build\\lib\\taos.dll C:\\Windows\\System32
          if exist "%WIN_INTERNAL_ROOT%\\debug\\build\\lib\\taosnative.dll" (
             xcopy /e/y/i/f "%WIN_INTERNAL_ROOT%\\debug\\build\\lib\\taosnative.dll" C:\\Windows\\System32
          )
        shell: cmd
      - name: Run ctest
        run: |
          echo "windows ctest ..."
          time /t
          cd %WIN_INTERNAL_ROOT%\\debug
          ctest -E "pcre*|example*" || exit 7
          time /t
        shell: cmd
      - name: Run function test
        run: |
          echo "windows test ..."
          xcopy /e/y/i/f "%WIN_INTERNAL_ROOT%\debug\build\lib\taos.dll" C:\Windows\System32
          if exist "%WIN_INTERNAL_ROOT%\\debug\\build\\lib\\taosnative.dll" (
             xcopy /e/y/i/f "%WIN_INTERNAL_ROOT%\\debug\\build\\lib\\taosnative.dll" C:\\Windows\\System32
          )
          ls -l "C:\Windows\System32\taos.dll"
          time /t
          cd %WIN_SYSTEM_TEST_ROOT%
          echo "testing ..."
          python3 test-win.py ci
          if %ERRORLEVEL% == 8 (
             echo "Test script returned error code 8"
             exit 1
          )
          time /t
        shell: cmd
        
      - name: Clearup the running cases
        shell: cmd
        continue-on-error: true
        if: always()
        run: |
          tasklist /FI "IMAGENAME eq python3.exe" /NH | findstr /I python3.exe >nul
          if %errorlevel% equ 0 (
              wmic process where "name='python3.exe'" delete
              echo Python3 process has been terminated.
          ) else (
              echo No Python3 process was found.
          )           

