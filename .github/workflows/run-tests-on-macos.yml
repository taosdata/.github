name: Run tests on macOS

on:
  workflow_dispatch:
    inputs:
      tdinternal:
        description: 'Is the PR from TDinternal?'
        required: true
        type: boolean
      run_function_test:
        description: 'Run function test cases?'
        required: true
        type: boolean
      source_branch:
        description: 'Source branch'
        required: true
        type: string
      target_branch:
        description: 'Target branch'
        required: true
        type: string
      pr_number:
        description: 'PR number'
        required: true
        type: number

jobs:
  run-tests-on-mac:
    runs-on: 
      group: CI
      labels: [self-hosted, macOS, testing]

    timeout-minutes: 60

    env:
      CONTAINER_NAME: 'taosd-test'
      WKDIR: '/var/lib/jenkins/workspace'
      WK: '/var/lib/jenkins/workspace/TDinternal'
      WKC: '/var/lib/jenkins/workspace/TDinternal/community'
      IS_TDINTERNAL: ${{ github.event.inputs.tdinternal }}
      SOURCE_BRANCH: ${{ github.event.inputs.source_branch }}
      TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
      PR_NUMBER: ${{ github.event.inputs.pr_number }}

    steps:
      - name: Output the environment information
        run: |
          echo "::group::Environment Info"
          date
          hostname
          env
          echo "Runner: ${{ runner.name }}"
          echo "Trigger Source from TDinternal: ${{ env.IS_TDINTERNAL }}"
          echo "Workspace: ${{ env.WKDIR }}"
          git --version
          echo "${{ env.WKDIR }}/restore.sh -p ${{ env.PR_NUMBER }} -n ${{ github.run_number }} -c ${{ env.CONTAINER_NAME }}"
          echo "::endgroup::"
      - name: Prepare repositories
        run: |
          set -euo pipefail
          prepare_environment() {
            cd "$1"
            git reset --hard
            git clean -f
            git remote prune origin
            git fetch
            git checkout "$2"
          }
          prepare_environment "${{ env.WK }}" "${{ env.TARGET_BRANCH }}"
          prepare_environment "${{ env.WKC }}" "${{ env.TARGET_BRANCH }}"
      - name: Get latest codes and logs for TDinternal PR
        if: ${{ env.IS_TDINTERNAL == 'true' }}
        run: |
          cd ${{ env.WK }}
          git pull >/dev/null
          git log -5
          echo "`date "+%Y%m%d-%H%M%S"` TDinternalTest/${{ env.PR_NUMBER }}:${{ github.run_number }}:${{ env.TARGET_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "CHANGE_BRANCH:${{ env.SOURCE_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "TDinternal log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          git fetch origin +refs/pull/${{ env.PR_NUMBER }}/merge
          git checkout -qf FETCH_HEAD
          git log -5
          echo "TDinternal log merged: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          cd ${{ env.WKC }}
          git remote prune origin
          git pull >/dev/null
          git log -5
          echo "community log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
      - name: Get latest codes and logs for TDengine PR
        if: ${{ env.IS_TDINTERNAL == 'false' }}
        run: |
          cd ${{ env.WKC }}
          git remote prune origin
          git pull >/dev/null
          git log -5
          echo "`date "+%Y%m%d-%H%M%S"` TDengineTest/${{ env.PR_NUMBER }}:${{ github.run_number }}:${{ env.TARGET_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "CHANGE_BRANCH:${{ env.SOURCE_BRANCH }}" >>${{ env.WKDIR }}/jenkins.log
          echo "community log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          git fetch origin +refs/pull/${{ env.PR_NUMBER }}/merge
          git checkout -qf FETCH_HEAD
          git log -5
          echo "community log merged: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
          cd ${{ env.WK }}
          git pull >/dev/null
          git log -5
          echo "TDinternal log: `git log -5`" >>${{ env.WKDIR }}/jenkins.log
      - name: Update submodule
        run: |
          cd ${{ env.WKC }}
          git submodule update --init --recursive
      - name: Run tests
        run: |
          date
          cd ${{ env.WK }}
          rm -rf debug
          mkdir debug
          cd ${{ env.WK }}/debug
          echo $PATH
          echo "PATH=/opt/homebrew/bin:$PATH" >> $GITHUB_ENV
          cmake .. -DBUILD_TEST=true -DBUILD_HTTPS=false  -DCMAKE_BUILD_TYPE=Release
          make -j10
          ctest -j10 || exit 7
          date