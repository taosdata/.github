name: Update Hosts

on:
  push:
    branches:
      - test/fractal

# on:
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Enter the version of TDengine to install'
#         required: true
#         default: '3.3.5.1'
#       group:
#         description: 'Enter the group for the runner'
#         required: true
#         default: 'default'
#       dnode_count:
#         description: 'Number of nodes to deploy'
#         required: true
#         default: '2'

permissions:
  actions: read
  contents: read

jobs:
  filter-runners:
    runs-on: ubuntu-latest
    outputs:
      runners: ${{ steps.get-runners.outputs.matrix}}
      td_runners: ${{ steps.get-runners.outputs.td_matrix}}
      runner_names: ${{ steps.get-runners.outputs.names}}
      td_runner_names: ${{ steps.get-runners.outputs.td_names}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Available Runners
        env:
          GITHUB_TOKEN: ${{ secrets.RUNNER_PAT }}
        id: get-runners
        run: |
          set -euo pipefail
          echo "Fetching available runners..."
          response_file=$(mktemp)
          gh api /orgs/${{ github.repository_owner }}/actions/runners \
            --paginate \
            --jq '.runners' > "$response_file"

          # set dnode_count
          edge_dnode_count=2
          center_dnode_count=3

          filter_and_format() {
            local count=$1
            local label1=$2
            local label2=$3

            jq -c --argjson count "$count" --arg label1 "$label1" --arg label2 "$label2" '
              map(
                select(
                  .labels |
                  (map(.name) | index($label1)) != null and
                  (map(.name) | index($label2)) != null
                )
                | {
                    name,
                    group: (
                      if .labels | map(.name) | index("fractal") != null then "fractal"
                      else "default"
                      end
                    ),
                    labels: (
                      .labels | map(.name) | join(", ") |
                      split(", ") |
                      map(select(. != "")) |
                      ["self-hosted", "Linux", "X64"] + .
                    )
                  }
              )[:$count]
            ' "$response_file"
          }
          # filter_and_format "$edge_dnode_count" "fractal" "mqtt"
          filtered_mqtt_runners=$(filter_and_format "$edge_dnode_count" "fractal" "mqtt")
          filtered_edge_runners=$(filter_and_format "$edge_dnode_count" "fractal" "edge_td")
          filtered_center_runners=$(filter_and_format "$center_dnode_count" "fractal" "center_td")

          echo "✅ Selected runners with formatted labels:"
          echo "$filtered_mqtt_runners"
          echo "$filtered_edge_runners"
          echo "$filtered_center_runners"

          # all runners
          filtered_runners=$(jq -s '[.[][]]' <(echo "$filtered_mqtt_runners") <(echo "$filtered_edge_runners") <(echo "$filtered_center_runners"))
          echo "✅ Selected runners with formatted labels:"
          echo "$filtered_runners"

          # TDengine runners
          td_runners=$(jq -s '[.[][]]' <(echo "$filtered_edge_runners") <(echo "$filtered_center_runners"))
          echo "✅ Selected td-runners with formatted labels:"
          echo "$td_runners"

          # make sure filtered_runners is a valid JSON array
          if [ -z "$filtered_runners" ]; then
            echo "No runners found. Setting empty matrix."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "names=[]" >> $GITHUB_OUTPUT
          else
            echo "matrix="$filtered_runners"" >> $GITHUB_OUTPUT
            names=$(echo "$filtered_runners" | jq -r '.[].name' | tr '\n' ',')
            names=${names%,}
            echo "names=${names}" >> $GITHUB_OUTPUT

            echo "td_matrix="$td_runners"" >> $GITHUB_OUTPUT
            td_runner_names=$(echo "$td_runners" | jq -r '.[].name' | tr '\n' ',')
            td_runner_names=${td_runner_names%,}
            echo "td_runner_names=${td_runner_names}" >> $GITHUB_OUTPUT
          fi

  update-hosts:
    needs: filter-runners

    strategy:
      matrix:
        runner: ${{ fromJson(needs.filter-runners.outputs.runners || '[]') }}
    runs-on:
      group: ${{ matrix.runner.group }}
      labels: ${{ matrix.runner.labels }}
    steps:
      - name: Print Runner Info
        run: |
          echo "🔄 Running on group: ${{ matrix.runner.group }}"
          echo "🔄 Name: ${{ matrix.runner.name }}"

      - name: Get IP and Hostname
        id: get-ip-hostname
        run: |
          echo "🔄 Getting IP and hostname for the runner..."

          # 获取 IP 和主机名
          ip=$(hostname -I | awk '{print $1}')  # 获取 IP 地址
          hostname=$(hostname)  # 获取主机名

          echo "IP: $ip"
          echo "Hostname: $hostname"

          # 将 IP 和主机名保存为输出
          echo "$ip $hostname" > ip_hostname_${{ matrix.runner.name }}.txt

      - name: Upload IP and Hostname Info
        uses: actions/upload-artifact@v4
        with:
          name: ip_hostname_${{ matrix.runner.name }}
          path: ip_hostname_${{ matrix.runner.name }}.txt

  combine-and-update-hosts:
    needs:
      - update-hosts
      - filter-runners
    strategy:
      matrix:
        runner: ${{ fromJson(needs.filter-runners.outputs.runners || '[]') }}
    runs-on:
      group: ${{ matrix.runner.group }}
      labels: ${{ matrix.runner.labels }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        shell: bash
        run: |
          echo "🔄 Installing GitHub CLI..."
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Authenticate GitHub CLI
        run: |
          echo "🔄 Authenticating GitHub CLI..."
          echo "${{ secrets.RUNNER_PAT }}" | gh auth login --with-token

      - name: Download IP and Hostname Info
        run: |
          echo "🔄 Downloading IP and hostname info for each runner..."
          runner_name=${{ needs.filter-runners.outputs.runner_names }}
          echo "Runner Name: $runner_name"

          IFS=',' read -r -a names_array <<< "$runner_name"
          echo "Extracted names: $names_array"
          for name in "${names_array[@]}"; do
            echo "Downloading artifact for runner: $name"
            gh run download $GITHUB_RUN_ID --name "ip_hostname_$name" --dir ip_hostname
          done

      - name: Combine IP and Hostname Info
        run: |
          echo "🔄 Combining IP and hostname info..."

          # 读取所有 runner 的 IP 和主机名信息
          ip_hostname_info=$(cat ip_hostname/*.txt | sort | uniq)  # 去重

          # 将所有信息保存为环境变量，供后续步骤使用
          echo "ip_hostname_info<<EOF" >> $GITHUB_ENV
          echo -e "$ip_hostname_info" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update /etc/hosts
        run: |
          echo "🔄 Updating /etc/hosts..."

          # 遍历 ip_hostname_info 的每一行
          while IFS= read -r line; do
            # 检查 /etc/hosts 中是否已经存在该行
            if ! grep -Fxq "$line" /etc/hosts; then
              # 如果不存在，则追加到 /etc/hosts
              echo "$line" | sudo tee -a /etc/hosts
            else
              echo "✅ Skipping (already exists): $line"
            fi
          done <<< "$ip_hostname_info"

          echo "✅ Updated /etc/hosts with runner IPs and hostnames:"
          cat /etc/hosts

  install-tdengine:
    needs:
      - combine-and-update-hosts
      - filter-runners
    strategy:
      matrix:
        runner: ${{ fromJson(needs.filter-runners.outputs.td_runners || '[]') }}
    runs-on:
      group: ${{ matrix.runner.group }}
      labels: ${{ matrix.runner.labels }}
    steps:
      - name: Print Runner Info
        run: |
          echo "🔄 Running on group: ${{ matrix.runner.group }}"

      - name: Install TDengine Enterprise
        uses: taosdata/.github/.github/actions/install-tdengine-enterprise@fractal
        with:
          version: 3.3.5.0
          nas_download_url: ${{ secrets.NAS_DOWNLOAD_URL }}

