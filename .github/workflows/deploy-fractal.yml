# name: deploy-mqttcli

# on:
#   workflow_dispatch:
#     inputs:
#       runner_number:
#         description: 'Runner number (1-2)'
#         required: true
#         type: choice
#         options:
#           - 1
#           - 2


# jobs:
#   set-runners:
#     runs-on: ubuntu-latest
#     outputs:
#       mqtt_clients: ${{ steps.set-mqtt-clients.outputs.mqtt_clients }}
#       fractal_edges: ${{ steps.set-fractal-edges.outputs.fractal_edges }}
#     steps:
#       - name: Set MQTT Clients
#         id: set-mqtt-clients
#         run: |
#           echo "Setting MQTT Clients"
#           clients=$(seq -s ',' 1 ${{ github.event.inputs.runner_number }} | sed 's/[0-9]\+/mqtt-client&/g')
#           clients_json=$(echo -n $clients | jq -R -s -c 'split(",")')
#           echo "::set-output name=mqtt_clients::$clients_json"

#       - name: Set Fractal Edges
#         id: set-fractal-edges
#         run: |
#           echo "Setting Fractal Edges"
#           edges=$(seq -s ',' 1 ${{ github.event.inputs.runner_number }} | sed 's/[0-9]\+/fractal-edge-&/g')
#           edges_json=$(echo -n $edges | jq -R -s -c 'split(",")')
#           echo "::set-output name=fractal_edges::$edges_json"

#   deploy-mqtt-client:
#     needs: set-runners
#     strategy:
#       matrix:
#         runner: ${{ fromJSON(needs.set-runners.outputs.mqtt_clients) }}
#     runs-on: 
#       group: fractal
#       labels: 
#         - self-hosted
#         - Linux
#         - X64
#         - fractal
#         - ${{ matrix.runner }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Replace sources
#         run: |
#           cd /root/tools/deploy && ./setup_system.sh replace_sources
#       - name: Install MQTT CLI
#         uses: ./.github/actions/install-mqtt-simulator
#         with:
#           res_app_id: ${{ vars.RES_APP_ID }}
#           res_app_key: ${{ secrets.RES_APP_KEY }}
      
#       - name: Find mqtt_pub binary
#         run: |
#           if command -v mqtt_pub &> /dev/null; then
#             echo "mqtt_pub found at $(command -v mqtt_pub)"
#           else
#             echo "mqtt_pub not found"
#           fi
#       - name: Get IP Addresses
#         run: |
#           local_ip=$(hostname -I | awk '{print $1}')
#           echo "Local IP Address: $local_ip"
#   deploy-fractal-edge:
#     needs: set-runners
#     strategy:
#       matrix:
#         runner: ${{ fromJSON(needs.set-runners.outputs.fractal_edges) }}
#     runs-on: 
#       group: fractal
#       labels: 
#         - self-hosted
#         - Linux
#         - X64
#         - edge_td
#         - fractal
#         - ${{ matrix.runner }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
      

#       - name: Get IP Addresses
#         run: |
#           local_ip=$(hostname -I | awk '{print $1}')
#           echo "Local IP Address: $local_ip"
#       - name: Run a script on Fractal Edges
#         run: echo "Running on ${{ runner.name }}"

name: deploy-mqttcli

on:
  workflow_dispatch:
    inputs:
      runner_number:
        description: 'Runner number (1-2)'
        required: true
        type: choice
        options:
          - 1
          - 2


jobs:
  set-runners:
    runs-on: ubuntu-latest
    outputs:
      runner_combinations: ${{ steps.set-runner-combinations.outputs.runner_combinations }}  
    #   mqtt_clients: ${{ steps.set-mqtt-clients.outputs.mqtt_clients }}
    #   fractal_edges: ${{ steps.set-fractal-edges.outputs.fractal_edges }}
    steps:
      - name: Set Runner Combinations
        id: set-runner-combinations
        run: |
            echo "Setting Runner Combinations"
            # 生成 mqtt-client 和 fractal-edge 的标签数组
            mqtt_client=$(seq 1 2 | sed 's/^/mqtt-client/')
            fractal_edge=$(seq 1 2 | sed 's/^/fractal-edge-/')

            # 将标签转换为 JSON 数组
            mqtt_json=$(echo "$mqtt_client" | jq -R -s -c 'split("\n")[:-1]')  # 去除末尾空元素
            fractal_json=$(echo "$fractal_edge" | jq -R -s -c 'split("\n")[:-1]')

            # 生成组合数组：一一对应的 [{"mqtt_client": "mqtt-client1", "fractal_edge": "fractal-edge-1"}, ...]
            combinations=$(jq -n --argjson a "$mqtt_json" --argjson b "$fractal_json" '$a | to_entries | map({ mqtt_client: .value, fractal_edge: $b[.key] })')
            # 调试输出
            echo "Generated combinations: $combinations"

            # 设置输出
            echo "::set-output name=runner_combinations::$combinations"#   - name: Set MQTT Clients
    #     id: set-mqtt-clients
    #     run: |
    #       echo "Setting MQTT Clients"
    #       clients=$(seq -s ',' 1 ${{ github.event.inputs.runner_number }} | sed 's/[0-9]\+/mqtt-client&/g')
    #       clients_json=$(echo -n $clients | jq -R -s -c 'split(",")')
    #       echo "::set-output name=mqtt_clients::$clients_json"

    #   - name: Set Fractal Edges
    #     id: set-fractal-edges
    #     run: |
    #       echo "Setting Fractal Edges"
    #       edges=$(seq -s ',' 1 ${{ github.event.inputs.runner_number }} | sed 's/[0-9]\+/fractal-edge-&/g')
    #       edges_json=$(echo -n $edges | jq -R -s -c 'split(",")')
    #       echo "::set-output name=fractal_edges::$edges_json"
            
  deploy-fractal-edge:
    needs: set-runners
    strategy:
      matrix:
        combination: ${{ fromJSON(needs.set-runners.outputs.runner_combinations) }}
    runs-on: 
      group: fractal
      labels: 
        - self-hosted
        - Linux
        - X64
        - edge_td
        - fractal
        - ${{ matrix.combination.fractal_edge }}
    outputs:
      fractal_ips: ${{ steps.collect-ips.outputs.fractal_ips }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get IP Addresses
        run: |
          local_ip=$(hostname -I | awk '{print $1}')
          echo "Local IP Address: $local_ip"

      - name: Collect IPs
        id: collect-ips
        run: |
          echo "Collecting IPs"
          fractal_ips=$(echo '{}' | jq --arg key "${{ matrix.combination.fractal_edge }}" --arg value "${{ steps.get-ip.outputs.local_ip }}" '.[$key] = $value')
          echo "::set-output name=fractal_ips::$fractal_ips"
  deploy-mqtt-client:
    needs: [set-runners,deploy-fractal-edge]
    strategy:
      matrix:
        combination: ${{ fromJSON(needs.set-runners.outputs.runner_combinations) }}
    runs-on: 
      group: fractal
      labels: 
        - self-hosted
        - Linux
        - X64
        - fractal
        - ${{ matrix.combination.mqtt_client }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Fractal Edges IPs
        run: |
          fractal_ips=${{ needs.deploy-fractal-edge.outputs.fractal_ips }}
          echo "Fractal Edges IPs: $fractal_ips"
          echo "IP for runner ${{ matrix.combination.fractal_edge }}: $(echo $fractal_ips | jq -r --arg key "${{ matrix.combination.fractal_edge }}" '.[$key]')"
    #   - name: Replace sources
    #     run: |
    #       cd /root/tools/deploy && ./setup_system.sh replace_sources
    #   - name: Install MQTT CLI
    #     uses: taosdata/.github/.github/actions/install-mqtt-simulator
    #     with:
    #       res_app_id: ${{ vars.TAOSDATA_BOT_ID }}
    #       res_app_key: ${{ secrets.TAOSDATA_BOT_KEY }}
      
    #   - name: Find mqtt_pub binary
    #     run: |
    #       if command -v mqtt_pub &> /dev/null; then
    #         echo "mqtt_pub found at $(command -v mqtt_pub)"
    #       else
    #         echo "mqtt_pub not found"
    #       fi
    #   - name: Get IP Addresses
    #     run: |
    #       local_ip=$(hostname -I | awk '{print $1}')
    #       echo "Local IP Address: $local_ip"
    #   - name: Get fractal edge IP
    #     run: |
    #       edge_ip=$(hostname -I | awk '{print $1}')
    #       echo "Fractal Edge IP Address: $edge_ip"
