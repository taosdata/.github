# Reusable Workflow for taosd & taosc coverage test

name: TDengine Coverage (taosd & taosc)

on:
  workflow_call:
    inputs:
      tdinternal:
        description: 'Is the PR from TDinternal?'
        required: true
        type: boolean
      specified_tdengine_test_branch:
        description: 'Enter the test branch name of TDengine'
        required: true
        type: string
      specified_tdinternal_test_branch:
        description: 'Enter the test branch of TDinternal'
        required: true
        type: string

jobs:
  run-tests-coverage-on-linux:
    runs-on: 
      group: CI
      labels: [self-hosted, Linux, X64, coverage]
    
    timeout-minutes: 300

    env:
      CONTAINER_NAME: 'taosd-test'
      WKDIR: '/var/lib/jenkins/workspace'
      WK: '/var/lib/jenkins/workspace/TDinternal'
      WKC: '/var/lib/jenkins/workspace/TDinternal/community'
      IS_TDINTERNAL: ${{ github.event.inputs.tdinternal }}
      SOURCE_BRANCH_TDENGINE: ""
      SOURCE_BRANCH_TDINTERNAL: ""

    steps:
      - name: Set environment variables based on condition
        run: |
          echo "Setting SOURCE_BRANCH_TDENGINE and SOURCE_BRANCH_TDINTERNAL based on inputs..."
          echo "SOURCE_BRANCH_TDENGINE=${{ inputs.specified_tdengine_test_branch }}" >> $GITHUB_ENV
          echo "SOURCE_BRANCH_TDINTERNAL=${{ inputs.specified_tdinternal_test_branch }}" >> $GITHUB_ENV
          echo "Current step debug (GITHUB_ENV content):"
          cat $GITHUB_ENV

      - name: Output the environment information
        run: |
          echo "::group::Environment Info"
          date
          hostname
          env
          echo "Runner: ${{ runner.name }}"
          echo "Trigger Source from TDinternal: ${{ env.IS_TDINTERNAL }}"
          echo "Workspace: ${{ env.WKDIR }}"
          git --version
          echo "${{ env.WKDIR }}/restore.sh -n ${{ github.run_number }} -c ${{ env.CONTAINER_NAME }}"
          echo "::endgroup::"

      - name: Prepare TDinternal repository
        run: |
          echo "Preparing TDinternal repository..."
          cd ${{ env.WK }}
          git reset --hard
          git clean -f
          git remote prune origin
          git fetch
          if git rev-parse --verify origin/${{ env.SOURCE_BRANCH_TDINTERNAL }} >/dev/null 2>&1; then
            git checkout ${{ env.SOURCE_BRANCH_TDINTERNAL }}
          else
            echo "Branch ${{ env.SOURCE_BRANCH_TDINTERNAL }} does not exist. checkout default branch 3.0."
            git checkout 3.0
          fi
          git pull

      - name: Prepare TDengine repository
        run: |
          echo "Preparing TDengine repository..."
          cd ${{ env.WKC }}
          git reset --hard
          git clean -f
          git remote prune origin
          git fetch
          if git rev-parse --verify origin/${{ env.SOURCE_BRANCH_TDENGINE }} >/dev/null 2>&1; then
            git checkout ${{ env.SOURCE_BRANCH_TDENGINE }}
          else
            echo "Branch ${{ env.SOURCE_BRANCH_TDENGINE }} does not exist. checkout default branch 3.0."
            git checkout 3.0
          fi
          git pull

      - name: Update submodule
        run: |
          cd ${{ env.WKC }}
          git submodule update --init --recursive
 
      - name: Build docker container
        run: |
          date
          rm -rf ${{ env.WKC }}/debug
          cd ${{ env.WKC }}/tests/parallel_test
          time ./container_build_coverage.sh -w ${{ env.WKDIR }} -e

      - name: Get parameters for testing
        id: get_param
        run: |
          log_server_file="/home/log_server.json"
          timeout_cmd=""
          extra_param=""

          if [ -f "$log_server_file" ]; then
            log_server_enabled=$(jq '.enabled' "$log_server_file")
            timeout_param=$(jq '.timeout' "$log_server_file")
            if [ "$timeout_param" != "null" ] && [ "$timeout_param" != "0" ]; then
              timeout_cmd="timeout $timeout_param"
            fi

            if [ "$log_server_enabled" == "1" ]; then
              log_server=$(jq '.server' "$log_server_file" | sed 's/\\\"//g')
              if [ "$log_server" != "null" ] && [ "$log_server" != "" ]; then
                extra_param="-w $log_server"
              fi
            fi
          fi
          echo "timeout_cmd=$timeout_cmd" >> $GITHUB_OUTPUT
          echo "extra_param=$extra_param" >> $GITHUB_OUTPUT

      - name: Run function test cases
        run: |
          cd ${{ env.WKC }}/tests/parallel_test
          export DEFAULT_RETRY_TIME=2
          date
          ##${{ steps.get_param.outputs.timeout_cmd }} time ./run.sh -e -m /home/m.json -t cases.task -b PR-${{ github.run_number }} -l ${{ env.WKDIR }}/log -o 1200 ${{ steps.get_param.outputs.extra_param }}
          ${{ steps.get_param.outputs.timeout_cmd }} time ./run.sh -e -m /home/m.json -t longtimeruning_cases.task -b PR-${{ github.run_number }} -l ${{ env.WKDIR }}/log -o 100 ${{ steps.get_param.outputs.extra_param }}
          ## ${{ steps.get_param.outputs.timeout_cmd }} time ./run.sh -e -m /home/m.json -t tdgpt_cases.task -b PR-${{ github.run_number }} -l ${{ env.WKDIR }}/log -o 1200 ${{ steps.get_param.outputs.extra_param }}
        continue-on-error: true  
   
      - name: Run taosd && taosc coverage 
        if: always() 
        run: |
            cd ${{ env.WKC }}/tests/parallel_test
            date
            ./run_coverage_container.sh -d ${{ env.WKDIR }} -b ${{ env.SOURCE_BRANCH_TDENGINE }} > coverage.log 2>&1
            cat coverage.log|wc -l
            cat coverage.log | grep -v FN | grep -v DA | grep -v SF | grep -v LF | grep -v TN |grep -v end | grep -v LH || true
        continue-on-error: true  

      - name: Clearup the running cases
        if: always()
        run: |
          pid=$(ps -ef | grep 'run_case.sh' | grep -v 'grep' | awk '{print $2}')
          if [ -n "$pid" ]; then
            ps -ef | grep 'run_case.sh'  | grep -v 'grep' | awk '{print $2}'| xargs kill -9
          else
              echo "No run_case.sh process is running."
          fi
