name: TDengine Coverage (taosd & taosc)
description: Reusable Workflow for taosd & taosc coverage test

on:
  workflow_call:
    inputs:
      specified_tdinternal_test_branch:
        description: 'Enter the test branch of TDinternal'
        required: true
        type: string
      specified_tdengine_test_branch:
        description: 'Enter the test branch of TDengine'
        required: true
        type: string

jobs:
  validate_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Get all changed case files
        id: changed-case-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            test/cases/**/test_*.py

      - name: Validate test files
        if: steps.changed-case-files.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-case-files.outputs.all_changed_files }}
        run: |
          EXIT_CODE=0
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
            python .github/scripts/validate_tests.py "$file" || EXIT_CODE=1
          done
          exit $EXIT_CODE

  run-tests:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux]
        include:
          - platform: linux
            runner_group: CI
            runner_labels: [self-hosted, Linux, X64, new-framework]
            WKDIR: '/var/lib/jenkins/workspace'
            WK: '/var/lib/jenkins/workspace/TDinternal'
            WKC: '/var/lib/jenkins/workspace/TDinternal/community'
    runs-on:
      group: ${{ matrix.runner_group }}
      labels: ${{ matrix.runner_labels }}

    needs: validate_tests

    timeout-minutes: 600

    env:
      CONTAINER_NAME: 'taosd-test'
      WKDIR: ${{ matrix.WKDIR }}
      WK: ${{ matrix.WK }}
      WKC: ${{ matrix.WKC }}
      IS_TDINTERNAL: ${{ inputs.tdinternal }}
      CURRENT_PLATFORM: ${{ matrix.platform }}
      TARGET_BRANCH: ${{ inputs.specified_target_branch }}
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: "1"
      LANG: en_US.UTF-8      
      SOURCE_BRANCH_TDINTERNAL: ""
      SOURCE_BRANCH_TDENGINE: ""

    defaults:
      run:
        working-directory: ${{ github.workspace }}/.github/scripts/

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/.github'
          ref: 'test_coverage'
          fetch-depth: 0

      - name: Set environment variables based on condition
        run: |
          echo "Setting SOURCE_BRANCH_TDENGINE and SOURCE_BRANCH_TDINTERNAL based on inputs..."
          echo "SOURCE_BRANCH_TDINTERNAL=${{ inputs.specified_tdinternal_test_branch }}" >> $GITHUB_ENV
          echo "SOURCE_BRANCH_TDENGINE=${{ inputs.specified_tdengine_test_branch }}" >> $GITHUB_ENV
          echo "Current step debug (GITHUB_ENV content):"
          cat $GITHUB_ENV

      - name: Prepare TDinternal repository
        run: |
          echo "Preparing TDinternal repository..."
          cd ${{ env.WK }}
          git reset --hard
          git clean -f
          git remote prune origin
          git fetch
          if git rev-parse --verify origin/${{ env.SOURCE_BRANCH_TDINTERNAL }} >/dev/null 2>&1; then
            git checkout ${{ env.SOURCE_BRANCH_TDINTERNAL }}
          else
            echo "Branch ${{ env.SOURCE_BRANCH_TDINTERNAL }} does not exist. Switching to default branch cover/3.0."
            git switch -c cover/3.0 origin/cover/3.0
          fi
          echo "Pulling latest code from cover/3.0 branch..."
          git pull || { echo "Failed to pull the latest code."; exit 1; }
          #git pull origin 3.0 || { echo "Failed to pull from 3.0 branch"; exit 1; }
          echo "Current branch: $(git branch --show-current)"
          echo "Current commit:" && git log -1 --oneline  

      - name: Prepare TDengine repository
        run: |
          echo "Preparing TDengine repository..."
          cd ${{ env.WKC }}
          git reset --hard
          git clean -f
          git remote prune origin
          git fetch
          if git rev-parse --verify origin/${{ env.SOURCE_BRANCH_TDENGINE }} >/dev/null 2>&1; then
            git switch ${{ env.SOURCE_BRANCH_TDENGINE }}
          else
            echo "Branch ${{ env.SOURCE_BRANCH_TDENGINE }} does not exist. Switching to default branch cover/3.0."
            git switch -c cover/3.0 origin/cover/3.0
          fi
          echo "Pulling latest code from cover/3.0 branch..."
          git pull || { echo "Failed to pull the latest code."; exit 1; }
          #git pull origin 3.0 || { echo "Failed to pull from 3.0 branch"; exit 1; }
          echo "Current branch: $(git branch --show-current)"
          echo "Current commit:" && git log -1 --oneline  

      - name: Build docker or repo
        run: python3 build.py
        env:
          BUILD_TYPE: ${{ matrix.platform == 'linux' && 'docker' || 'repo' }}

      - name: Run function test cases
        run: python3 test.py
        env:
          TEST_TYPE: 'function'
        continue-on-error: true

      - name: Run coverage test 
        if: matrix.platform == 'linux'
        run: python3 test.py
        env:
          TEST_TYPE: 'coverage'
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}